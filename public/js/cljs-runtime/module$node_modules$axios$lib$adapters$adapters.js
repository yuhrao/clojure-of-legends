shadow$provide.module$node_modules$axios$lib$adapters$adapters=function(global,require,module,exports){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var _utils=_interopRequireDefault(require("module$node_modules$axios$lib$utils"));global=_interopRequireDefault(require("module$node_modules$axios$lib$helpers$null"));module=_interopRequireDefault(require("module$node_modules$axios$lib$adapters$xhr"));
var _AxiosError=_interopRequireDefault(require("module$node_modules$axios$lib$core$AxiosError"));const knownAdapters={http:global.default,xhr:module.default};_utils.default.forEach(knownAdapters,(fn,value)=>{if(fn){try{Object.defineProperty(fn,"name",{value})}catch(e){}Object.defineProperty(fn,"adapterName",{value})}});exports.default={getAdapter:adapters=>{adapters=_utils.default.isArray(adapters)?adapters:[adapters];const {length}=adapters;let nameOrAdapter,adapter;for(let i=0;i<length&&!(nameOrAdapter=
adapters[i],adapter=_utils.default.isString(nameOrAdapter)?knownAdapters[nameOrAdapter.toLowerCase()]:nameOrAdapter);i++);if(!adapter){if(!1===adapter)throw new _AxiosError.default(`Adapter ${nameOrAdapter} is not supported by the environment`,"ERR_NOT_SUPPORT");throw Error(_utils.default.hasOwnProp(knownAdapters,nameOrAdapter)?`Adapter '${nameOrAdapter}' is not available in the build`:`Unknown adapter '${nameOrAdapter}'`);}if(!_utils.default.isFunction(adapter))throw new TypeError("adapter is not a function");
return adapter},adapters:knownAdapters}}
//# sourceMappingURL=module$node_modules$axios$lib$adapters$adapters.js.map
