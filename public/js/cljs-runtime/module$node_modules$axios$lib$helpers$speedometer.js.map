{
"version":3,
"file":"module$node_modules$axios$lib$helpers$speedometer.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,iDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAS9GC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,OAAR,CAAkB,IAAK,EA4CvBJ,QAAQI,CAAAA,OAAR,CA1CAC,QAAoB,CAACC,YAAD,CAAeC,GAAf,CAAoB,CACtCD,YAAA,CAAeA,YAAf,EAA+B,EAC/B,OAAME,MAAYC,KAAJ,CAAUH,YAAV,CAAd,CACMI,WAAiBD,KAAJ,CAAUH,YAAV,CACnB,KAAIK,KAAO,CAAX,CACIC,KAAO,CADX,CAEIC,aACJN,IAAA,CAAcO,IAAAA,EAAR,GAAAP,GAAA,CAAoBA,GAApB,CAA0B,GAChC,OAAOQ,SAAa,CAACC,WAAD,CAAc,CAChC,IAAMC,IAAMC,IAAKD,CAAAA,GAAL,EACZ,OAAME,UAAYT,UAAA,CAAWE,IAAX,CAEbC,cAAL,GACEA,aADF,CACkBI,GADlB,CAIAT,MAAA,CAAMG,IAAN,CAAA;AAAcK,WACdN,WAAA,CAAWC,IAAX,CAAA,CAAmBM,GACnB,KAAIG,EAAIR,IAGR,KAFIS,WAEJ,CAFiB,CAEjB,CAAOD,CAAP,GAAaT,IAAb,CAAA,CACEU,WACI,EADUb,KAAA,CAAMY,CAAA,EAAN,CACV,CAAAA,CAAA,EAAId,YAGVK,KAAA,EAAQA,IAAR,CAAe,CAAf,EAAoBL,YAEhBK,KAAJ,GAAaC,IAAb,GACEA,IADF,EACUA,IADV,CACiB,CADjB,EACsBN,YADtB,CAIA,IAAI,EAAAW,GAAA,CAAMJ,aAAN,CAAsBN,GAAtB,CAAJ,CAKA,MAAO,CADDe,GACC,CADQH,SACR,EADqBF,GACrB,CAD2BE,SAC3B,EAASI,IAAKC,CAAAA,KAAL,CAAwB,GAAxB,CAAWH,WAAX,CAA+BC,GAA/B,CAAT,CAAkDR,IAAAA,EA7BzB,CARI,CAdsE;",
"sources":["node_modules/axios/lib/helpers/speedometer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$axios$lib$helpers$speedometer\"] = function(global,require,module,exports) {\n'use strict';\n/**\n * Calculate data maxRate\n * @param {Number} [samplesCount= 10]\n * @param {Number} [min= 1000]\n * @returns {Function}\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction speedometer(samplesCount, min) {\n  samplesCount = samplesCount || 10;\n  const bytes = new Array(samplesCount);\n  const timestamps = new Array(samplesCount);\n  let head = 0;\n  let tail = 0;\n  let firstSampleTS;\n  min = min !== undefined ? min : 1000;\n  return function push(chunkLength) {\n    const now = Date.now();\n    const startedAt = timestamps[tail];\n\n    if (!firstSampleTS) {\n      firstSampleTS = now;\n    }\n\n    bytes[head] = chunkLength;\n    timestamps[head] = now;\n    let i = tail;\n    let bytesCount = 0;\n\n    while (i !== head) {\n      bytesCount += bytes[i++];\n      i = i % samplesCount;\n    }\n\n    head = (head + 1) % samplesCount;\n\n    if (head === tail) {\n      tail = (tail + 1) % samplesCount;\n    }\n\n    if (now - firstSampleTS < min) {\n      return;\n    }\n\n    const passed = startedAt && now - startedAt;\n    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;\n  };\n}\n\nvar _default = speedometer;\nexports.default = _default;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","default","speedometer","samplesCount","min","bytes","Array","timestamps","head","tail","firstSampleTS","undefined","push","chunkLength","now","Date","startedAt","i","bytesCount","passed","Math","round"]
}
