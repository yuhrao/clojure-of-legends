shadow$provide.module$node_modules$axios$lib$helpers$validator=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var _data=require("module$node_modules$axios$lib$env$data"),_AxiosError=function(obj){return obj&&obj.__esModule?obj:{default:obj}}(require("module$node_modules$axios$lib$core$AxiosError"));const validators={};"object boolean number function string symbol".split(" ").forEach((type,i)=>{validators[type]=function(thing){return typeof thing===
type||"a"+(1>i?"n ":" ")+type}});const deprecatedWarnings={};validators.transitional=function(validator,version,message){function formatMessage(opt,desc){return"[Axios v"+_data.VERSION+"] Transitional option '"+opt+"'"+desc+(message?". "+message:"")}return(value,opt,opts)=>{if(!1===validator)throw new _AxiosError.default(formatMessage(opt," has been removed"+(version?" in "+version:"")),_AxiosError.default.ERR_DEPRECATED);version&&!deprecatedWarnings[opt]&&(deprecatedWarnings[opt]=!0,console.warn(formatMessage(opt,
" has been deprecated since v"+version+" and will be removed in the near future")));return validator?validator(value,opt,opts):!0}};exports.default={assertOptions:function(options,schema,allowUnknown){if("object"!==typeof options)throw new _AxiosError.default("options must be an object",_AxiosError.default.ERR_BAD_OPTION_VALUE);const keys=Object.keys(options);let i=keys.length;for(;0<i--;){const opt=keys[i];var validator=schema[opt];if(validator){const value=options[opt];validator=void 0===value||
validator(value,opt,options);if(!0!==validator)throw new _AxiosError.default("option "+opt+" must be "+validator,_AxiosError.default.ERR_BAD_OPTION_VALUE);}else if(!0!==allowUnknown)throw new _AxiosError.default("Unknown option "+opt,_AxiosError.default.ERR_BAD_OPTION);}},validators}}
//# sourceMappingURL=module$node_modules$axios$lib$helpers$validator.js.map
