{"version":3,"sources":["promesa/exec.cljc"],"mappings":"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","names":["promesa.exec/*default-scheduler*","promesa.exec/*default-executor*","promesa.exec/vthreads-supported?","promesa.exec/noop","cljs.core/constantly","promesa.exec/get-available-processors","js/promesa","js/promesa.exec","js/promesa.exec.default-scheduler","promesa.exec/default-scheduler","cljs.core/Delay","promesa.exec/->ScheduledExecutor","js/promesa.exec.default-executor","promesa.exec/default-executor","promesa.exec/->MicrotaskExecutor","js/promesa.exec.same-thread-executor","promesa.exec/same-thread-executor","promesa.exec/->SameThreadExecutor","js/promesa.exec.vthread-executor","promesa.exec/vthread-executor","js/promesa.exec.thread-executor","promesa.exec/thread-executor","promesa.exec/executor?","o","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","promesa.protocols/IExecutor","var_args","G__36414","promesa.exec/resolve-executor","js/Error","promesa.exec.resolve_executor","executor","cljs.core/deref","cljs.core._EQ_","G__36422","cljs.core/Keyword","promesa.util/maybe-deref","G__36430","promesa.exec/resolve-scheduler","promesa.exec.resolve_scheduler","scheduler","promesa.exec/wrap-bindings","f","G__36442","promesa.exec/run!","promesa.protocols/-run!","G__36451","promesa.exec/submit!","promesa.protocols/-submit!","G__36459","promesa.exec/schedule!","ms","promesa.protocols/-schedule!","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","promesa.exec/MicrotaskExecutor","this","promesa.protocols/-map","promesa.protocols/-promise","_","promesa.protocols/-catch","e","js/setTimeout","promesa.exec/SameThreadExecutor","cljs.core.comp","promesa.exec/ScheduledTask","promesa.exec/->ScheduledTask","state","done-iref","promesa.exec.goog$module$goog$object.get","self","cancel-fn","promesa.exec.goog$module$goog$object.set","promesa.exec/ScheduledExecutor","done","cljs.core/volatile!","task","cljs.core/vreset!","tid","cancel","js/clearTimeout"],"sourcesContent":[";; This Source Code Form is subject to the terms of the Mozilla Public\n;; License, v. 2.0. If a copy of the MPL was not distributed with this\n;; file, You can obtain one at http://mozilla.org/MPL/2.0/.\n;;\n;; Copyright (c) Andrey Antukh <niwi@niwi.nz>\n\n(ns promesa.exec\n  \"Executors & Schedulers facilities.\"\n  (:refer-clojure :exclude [run! pmap await])\n  (:require [promesa.protocols :as pt]\n            [promesa.util :as pu]\n            #?(:cljs [goog.object :as gobj]))\n  #?(:clj\n     (:import\n      clojure.lang.Var\n      java.lang.AutoCloseable\n      java.time.Duration\n      java.util.concurrent.Callable\n      java.util.concurrent.CompletableFuture\n      java.util.concurrent.CompletionStage\n      java.util.concurrent.CountDownLatch\n      java.util.concurrent.Executor\n      java.util.concurrent.ExecutorService\n      java.util.concurrent.Executors\n      java.util.concurrent.ForkJoinPool\n      java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory\n      java.util.concurrent.ForkJoinWorkerThread\n      java.util.concurrent.Future\n      java.util.concurrent.ScheduledExecutorService\n      java.util.concurrent.ThreadFactory\n      java.util.concurrent.TimeUnit\n      java.util.concurrent.TimeoutException\n      java.util.concurrent.atomic.AtomicLong\n      java.util.function.Supplier)))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; --- Globals & Defaults (with CLJS Impl)\n\n(declare #?(:clj scheduled-executor :cljs ->ScheduledExecutor))\n(declare #?(:clj cached-executor :cljs ->MicrotaskExecutor))\n(declare ->SameThreadExecutor)\n\n(def ^:dynamic *default-scheduler* nil)\n(def ^:dynamic *default-executor* nil)\n\n(def vthreads-supported?\n  \"A var that indicates if virtual threads are supported or not in the current runtime.\"\n  #?(:clj (and (pu/has-method? Thread \"startVirtualThread\")\n               (try\n                 (eval '(Thread/startVirtualThread (constantly nil)))\n                 true\n                 (catch Throwable cause\n                   false)))\n     :cljs false))\n\n(def noop (constantly nil))\n\n(defn- get-available-processors\n  []\n  #?(:clj (.availableProcessors (Runtime/getRuntime))\n     :cljs 1))\n\n(defonce\n  ^{:no-doc true}\n  default-scheduler\n  (delay #?(:clj (scheduled-executor :parallelism (get-available-processors))\n            :cljs (->ScheduledExecutor))))\n\n(defonce\n  ^{:no-doc true}\n  default-executor\n  (delay #?(:clj (ForkJoinPool/commonPool)\n            :cljs (->MicrotaskExecutor))))\n\n(defonce\n  ^{:doc \"A global thread executor that uses the same thread to run the code.\"}\n  same-thread-executor\n  (delay (->SameThreadExecutor)))\n\n(defonce\n  ^{:doc \"A global, virtual thread per task executor service.\"\n    :no-doc true}\n  vthread-executor\n  #?(:clj  (delay (when vthreads-supported?\n                    (eval '(java.util.concurrent.Executors/newVirtualThreadPerTaskExecutor))))\n     :cljs (delay (->MicrotaskExecutor))))\n\n(defonce\n  ^{:doc \"A global, thread per task executor service.\"\n    :no-doc true}\n  thread-executor\n  #?(:clj  (delay (cached-executor))\n     :cljs (delay (->MicrotaskExecutor))))\n\n(defn executor?\n  \"Returns true if `o` is an instane of Executor.\"\n  [o]\n  #?(:clj (instance? Executor o)\n     :cljs (satisfies? pt/IExecutor o)))\n\n#?(:clj\n(defn shutdown!\n  \"Shutdowns the executor service.\"\n  [^ExecutorService executor]\n  (.shutdown executor)))\n\n#?(:clj\n(defn shutdown-now!\n  \"Shutdowns and interrupts the executor service.\"\n  [^ExecutorService executor]\n  (.shutdownNow executor)))\n\n#?(:clj\n(defn shutdown?\n  \"Check if execitor is in shutdown state.\"\n  [^ExecutorService executor]\n  (.isShutdown executor)))\n\n(defn resolve-executor\n  {:no-doc true}\n  ([] (resolve-executor nil))\n  ([executor]\n   (if (or (nil? executor) (= :default executor))\n     @default-executor\n     (case executor\n       :thread  (pu/maybe-deref thread-executor)\n       :vthread (pu/maybe-deref vthread-executor)\n       (pu/maybe-deref executor)))))\n\n(defn resolve-scheduler\n  {:no-doc true}\n  ([] (resolve-scheduler nil))\n  ([scheduler]\n   (if (or (nil? scheduler) (= :default scheduler))\n     (pu/maybe-deref default-scheduler)\n     (pu/maybe-deref scheduler))))\n\n(defn wrap-bindings\n  {:no-doc true}\n  [f]\n  #?(:cljs f\n     :clj\n     (let [bindings (get-thread-bindings)]\n       (fn\n         ([]\n          (push-thread-bindings bindings)\n          (try\n            (f)\n            (finally\n              (pop-thread-bindings))))\n         ([a]\n          (push-thread-bindings bindings)\n          (try\n            (f a)\n            (finally\n              (pop-thread-bindings))))\n         ([a b]\n          (push-thread-bindings bindings)\n          (try\n            (f a b)\n            (finally\n              (pop-thread-bindings))))\n         ([a b c]\n          (push-thread-bindings bindings)\n          (try\n            (f a b c)\n            (finally\n              (pop-thread-bindings))))\n         ([a b c d]\n          (push-thread-bindings bindings)\n          (try\n            (f a b c d)\n            (finally\n              (pop-thread-bindings))))\n         ([a b c d e]\n          (push-thread-bindings bindings)\n          (try\n            (f a b c d e)\n            (finally\n              (pop-thread-bindings))))\n         ([a b c d e & args]\n          (push-thread-bindings bindings)\n          (try\n            (apply f a b c d e args)\n            (finally\n              (pop-thread-bindings))))))))\n\n;; --- Public API\n\n(defn run!\n  \"Run the task in the provided executor.\"\n  ([f]\n   (pt/-run! (resolve-executor *default-executor*) f))\n  ([executor f]\n   (pt/-run! (resolve-executor executor) f)))\n\n(defn submit!\n  \"Submit a task to be executed in a provided executor\n  and return a promise that will be completed with\n  the return value of a task.\n\n  A task is a plain clojure function.\"\n  ([f]\n   (pt/-submit! (resolve-executor *default-executor*) f))\n  ([executor f]\n   (pt/-submit! (resolve-executor executor) f)))\n\n(defn schedule!\n  \"Schedule a callable to be executed after the `ms` delay\n  is reached.\n\n  In JVM it uses a scheduled executor service and in JS\n  it uses the `setTimeout` function.\"\n  ([ms f]\n   (pt/-schedule! (resolve-scheduler) ms f))\n  ([scheduler ms f]\n   (pt/-schedule! (resolve-scheduler scheduler) ms f)))\n\n;; --- Pool & Thread Factories\n\n#?(:clj\n   (defn thread-factory?\n     \"Checks if `o` is an instance of ThreadFactory\"\n     [o]\n     (instance? ThreadFactory o)))\n\n#?(:clj\n   (defn- fn->thread-factory\n     \"Adapt a simple clojure function into a ThreadFactory instance.\"\n     [func]\n     (reify ThreadFactory\n       (^Thread newThread [_ ^Runnable runnable]\n        (func runnable)))))\n\n#?(:clj\n(def ^{:no-doc true :dynamic true}\n  *default-counter*\n  (AtomicLong. 0)))\n\n#?(:clj\n(defn get-next\n  \"Get next value from atomic long counter\"\n  {:no-doc true}\n  ([] (.getAndIncrement ^AtomicLong *default-counter*))\n  ([counter] (.getAndIncrement ^AtomicLong counter))))\n\n#?(:clj\n(defn thread-factory\n  \"Returns an instance of promesa default thread factory.\"\n  [& {:keys [name daemon priority]\n      :or {daemon true\n           priority Thread/NORM_PRIORITY\n           name \"promesa/thread/%s\"}}]\n  (let [counter (AtomicLong. 0)]\n    (reify ThreadFactory\n      (newThread [this runnable]\n        (doto (Thread. ^Runnable runnable)\n          (.setPriority (int priority))\n          (.setDaemon ^Boolean daemon)\n          (.setName (format name (get-next counter)))))))))\n\n#?(:clj\n(defn forkjoin-thread-factory\n  ^ForkJoinPool$ForkJoinWorkerThreadFactory\n  [& {:keys [name daemon] :or {name \"promesa/forkjoin/%s\" daemon true}}]\n  (let [counter (AtomicLong. 0)]\n    (reify ForkJoinPool$ForkJoinWorkerThreadFactory\n      (newThread [_ pool]\n        (let [thread (.newThread ForkJoinPool/defaultForkJoinWorkerThreadFactory pool)\n              tname  (format name (get-next counter))]\n          (.setName ^ForkJoinWorkerThread thread ^String tname)\n          (.setDaemon ^ForkJoinWorkerThread thread ^Boolean daemon)\n          thread))))))\n\n#?(:clj\n(defn- resolve-thread-factory\n  {:no-doc true}\n  ^ThreadFactory\n  [opts]\n  (cond\n    (thread-factory? opts) opts\n    (= :default opts)      (thread-factory)\n    (nil? opts)            (thread-factory)\n    (map? opts)            (thread-factory opts)\n    (fn? opts)             (fn->thread-factory opts)\n    :else                  (throw (ex-info \"Invalid thread factory\" {})))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; --- DEPRECATED\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n#?(:clj\n   (defn cached-pool\n     \"A cached thread pool constructor.\"\n     {:deprecated \"9.0\" :no-doc true}\n     ([]\n      (Executors/newCachedThreadPool))\n     ([opts]\n      (let [factory (resolve-thread-factory opts)]\n        (Executors/newCachedThreadPool factory)))))\n\n#?(:clj\n   (defn fixed-pool\n     \"A fixed thread pool constructor.\"\n     {:deprecated \"9.0\" :no-doc true}\n     ([n]\n      (Executors/newFixedThreadPool (int n)))\n     ([n opts]\n      (let [factory (resolve-thread-factory opts)]\n        (Executors/newFixedThreadPool (int n) factory)))))\n\n#?(:clj\n   (defn single-pool\n     \"A single thread pool constructor.\"\n     {:deprecated \"9.0\" :no-doc true}\n     ([]\n      (Executors/newSingleThreadExecutor))\n     ([opts]\n      (let [factory (resolve-thread-factory opts)]\n        (Executors/newSingleThreadExecutor factory)))))\n\n#?(:clj\n   (defn scheduled-pool\n     \"A scheduled thread pool constructor.\"\n     {:deprecated \"9.0\" :no-doc true}\n     ([] (Executors/newScheduledThreadPool (int 0)))\n     ([n] (Executors/newScheduledThreadPool (int n)))\n     ([n opts]\n      (let [factory (resolve-thread-factory opts)]\n        (Executors/newScheduledThreadPool (int n) factory)))))\n\n#?(:clj\n   (defn work-stealing-pool\n     \"Creates a work-stealing thread pool.\"\n     {:deprecated \"9.0\" :no-doc true}\n     ([] (Executors/newWorkStealingPool))\n     ([n] (Executors/newWorkStealingPool (int n)))))\n\n#?(:clj\n   (defn forkjoin-pool\n     {:deprecated \"9.0\" :no-doc true}\n     [{:keys [factory async? parallelism]\n       :or {async? true}\n       :as opts}]\n     (let [parallelism (or parallelism (get-available-processors))\n           factory     (cond\n                         (instance? ForkJoinPool$ForkJoinWorkerThreadFactory factory) factory\n                         (nil? factory) ForkJoinPool/defaultForkJoinWorkerThreadFactory\n                         :else (throw (ex-info \"Unexpected thread factory\" {:factory factory})))]\n       (ForkJoinPool. parallelism factory nil async?))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; --- END DEPRECATED\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n#?(:clj\n   (defn cached-executor\n     \"A cached thread executor pool constructor.\"\n     [& {:keys [factory]}]\n     (let [factory (or (some-> factory resolve-thread-factory)\n                       (thread-factory :name \"promesa/cached/%s\"))]\n       (Executors/newCachedThreadPool factory))))\n\n#?(:clj\n   (defn fixed-executor\n     \"A fixed thread executor pool constructor.\"\n     [& {:keys [parallelism factory]}]\n     (let [factory (or (some-> factory resolve-thread-factory)\n                       (thread-factory :name \"promesa/fixed/%s\"))]\n       (Executors/newFixedThreadPool (int parallelism) factory))))\n\n#?(:clj\n   (defn single-executor\n     \"A single thread executor pool constructor.\"\n     [& {:keys [factory]}]\n     (let [factory (or (some-> factory resolve-thread-factory)\n                       (thread-factory :name \"promesa/single/%s\"))]\n       (Executors/newSingleThreadExecutor factory))))\n\n#?(:clj\n   (defn scheduled-executor\n     \"A scheduled thread pool constructor.\"\n     [& {:keys [parallelism factory] :or {parallelism 1}}]\n     (let [parallelism (or parallelism (get-available-processors))\n           factory     (or (some-> factory resolve-thread-factory)\n                           (thread-factory :name \"promesa/scheduled/%s\"))]\n\n\n       (doto (java.util.concurrent.ScheduledThreadPoolExecutor. (int parallelism) ^ThreadFactory factory)\n         (.setRemoveOnCancelPolicy true)))))\n\n#?(:clj\n   (when vthreads-supported?\n     (eval\n      '(defn thread-per-task-executor\n         [& {:keys [factory]}]\n         (let [factory (or (some-> factory resolve-thread-factory)\n                           (thread-factory :name \"promesa/thread-per-task/%s\"))]\n           (Executors/newThreadPerTaskExecutor ^ThreadFactory factory))))))\n\n#?(:clj\n   (when vthreads-supported?\n     (eval\n      '(defn vthread-per-task-executor\n         []\n         (Executors/newVirtualThreadPerTaskExecutor)))))\n\n#?(:clj\n   (defn forkjoin-executor\n     [& {:keys [factory async? parallelism] :or {async? true}}]\n     (let [parallelism (or parallelism (get-available-processors))\n           factory     (cond\n                         (instance? ForkJoinPool$ForkJoinWorkerThreadFactory factory) factory\n                         (nil? factory) (forkjoin-thread-factory)\n                         :else (throw (ex-info \"Unexpected thread factory\" {:factory factory})))]\n       (ForkJoinPool. (int parallelism) factory nil async?))))\n\n#?(:clj\n   (defn work-stealing-executor\n     \"An alias for the `forkjoin-executor`.\"\n     [& params]\n     (apply forkjoin-executor params)))\n\n#?(:clj\n   (defn configure-default-executor!\n     [& params]\n     (alter-var-root #'*default-executor*\n                     (fn [executor]\n                       (when (and (delay? executor) (realized? executor))\n                         (.close ^AutoCloseable @executor))\n                       (when (instance? AutoCloseable executor)\n                         (.close ^AutoCloseable executor))\n                       (apply forkjoin-executor params)))))\n\n#?(:clj\n   (extend-type Executor\n     pt/IExecutor\n     (-run! [this f]\n       (CompletableFuture/runAsync ^Runnable f ^Executor this))\n\n     (-submit! [this f]\n       (CompletableFuture/supplyAsync ^Supplier (pu/->SupplierWrapper f) ^Executor this))))\n\n;; Default executor that executes cljs/js tasks in the microtask\n;; queue.\n#?(:cljs\n   (deftype MicrotaskExecutor []\n     pt/IExecutor\n     (-run! [this f]\n       (-> (pt/-submit! this f)\n           (pt/-map noop)))\n\n     (-submit! [this f]\n       (-> (pt/-promise nil)\n           (pt/-map (fn [_] (f)))\n           (pt/-catch (fn [e] (js/setTimeout #(throw e)) nil))))))\n\n;; Executor that executes the task in the calling thread\n#?(:clj\n   (deftype SameThreadExecutor []\n     Executor\n     (^void execute [_ ^Runnable f]\n       (.run f)))\n\n   :cljs\n   (deftype SameThreadExecutor []\n     pt/IExecutor\n     (-run! [this f]\n       (pt/-promise (comp noop f)))\n     (-submit! [this f]\n       (pt/-promise (f)))))\n\n;; --- Scheduler & ScheduledTask\n\n#?(:clj\n   (deftype ScheduledTask [^Future fut]\n     clojure.lang.IDeref\n     (deref [_] (.get fut))\n\n     clojure.lang.IBlockingDeref\n     (deref [_ ms default]\n       (try\n         (.get fut ms TimeUnit/MILLISECONDS)\n         (catch TimeoutException e\n           default)))\n\n     clojure.lang.IPending\n     (isRealized [_] (and (.isDone fut)\n                          (not (.isCancelled fut))))\n\n     pt/ICancellable\n     (-cancelled? [_]\n       (.isCancelled fut))\n     (-cancel! [_]\n       (when-not (.isCancelled fut)\n         (.cancel fut true)))\n\n     Future\n     (get [_] (.get fut))\n     (get [_ timeout unit] (.get fut timeout unit))\n     (isCancelled [_] (.isCancelled fut))\n     (isDone [_] (.isDone fut))\n     (cancel [_ interrupt?] (.cancel fut interrupt?)))\n\n   :cljs\n   (deftype ScheduledTask [state]\n     cljs.core/IPending\n     (-realized? [_]\n       (let [done-iref (gobj/get state \"done\")]\n         (deref done-iref)))\n\n     pt/ICancellable\n     (-cancelled? [_]\n       (gobj/get state \"cancelled\"))\n     (-cancel! [self]\n       (when-not (pt/-cancelled? self)\n         (let [cancel-fn (gobj/get state \"cancel-fn\")]\n           (gobj/set state \"cancelled\" true)\n           (cancel-fn))))))\n\n#?(:clj\n   (extend-type ScheduledExecutorService\n     pt/IScheduler\n     (-schedule! [this ms f]\n       (let [ms  (if (instance? Duration ms) (inst-ms ms) ms)\n             fut (.schedule this ^Callable f (long ms) TimeUnit/MILLISECONDS)]\n         (ScheduledTask. fut)))))\n\n#?(:cljs\n   (deftype ScheduledExecutor []\n     pt/IScheduler\n     (-schedule! [_ ms f]\n       (let [done (volatile! false)\n             task #(try\n                     (f)\n                     (finally\n                       (vreset! done true)))\n             tid (js/setTimeout task ms)\n             cancel #(js/clearTimeout tid)]\n         (->ScheduledTask #js {:done done\n                               :cancelled false\n                               :cancel-fn cancel})))))\n\n(defmacro with-dispatch\n  \"Helper macro for dispatch execution of the body to an executor\n  service. The returned promise is not cancellable (the body will be\n  executed independently of the cancellation).\"\n  [executor & body]\n  `(-> (submit! ~executor (wrap-bindings (^:once fn* [] ~@body)))\n       (pt/-bind pt/-promise)))\n\n(defmacro with-executor\n  \"Binds the *default-executor* var with the provided executor,\n  executes the macro body. It also can optionally shutdown or shutdown\n  and interrupt on termination if you provide `^:shutdown` and\n  `^:interrupt` metadata.\n\n  **EXPERIMENTAL API:** This function should be considered\n  EXPERIMENTAL and may be changed or removed in future versions until\n  this notification is removed.\"\n  [executor & body]\n  (let [interrupt?   (-> executor meta :interrupt)\n        shutdown?    (-> executor meta :shutdown)\n        executor-sym (gensym \"executor\")]\n    `(let [~executor-sym ~executor\n           ~executor-sym (if (fn? ~executor-sym) (~executor-sym) ~executor-sym)]\n       (binding [*default-executor* ~executor-sym]\n         (try\n           ~@body\n           (finally\n             ~(when (or shutdown? interrupt?)\n                (list (if interrupt? 'promesa.exec/shutdown-now! 'promesa.exec/shutdown!) executor-sym))))))))\n\n#?(:clj\n(defn pmap\n  \"Analogous to the `clojure.core/pmap` with the excetion that it allows\n  use a custom executor (binded to *default-executor* var) The default\n  clojure chunk size (32) is used for evaluation and the real\n  parallelism is determined by the provided executor.\n\n\n  **EXPERIMENTAL API:** This function should be considered\n  EXPERIMENTAL and may be changed or removed in future versions until\n  this notification is removed.\"\n  {:experimental true}\n  ([f coll]\n   (let [executor (resolve-executor *default-executor*)\n         frame    (Var/cloneThreadBindingFrame)]\n     (->> coll\n          (map (fn [o] (pt/-submit! executor #(do\n                                                (Var/resetThreadBindingFrame frame)\n                                                (f o)))))\n          (clojure.lang.RT/iter)\n          (clojure.lang.RT/chunkIteratorSeq)\n          (map (fn [o] (.get ^CompletableFuture o))))))\n  ([f coll & colls]\n   (let [step-fn (fn step-fn [cs]\n                   (lazy-seq\n                    (let [ss (map seq cs)]\n                      (when (every? identity ss)\n                        (cons (map first ss) (step-fn (map rest ss)))))))]\n     (pmap #(apply f %) (step-fn (cons coll colls)))))))\n\n#?(:clj\n   (defmacro thread\n     \"A low-level, not-pooled thread constructor.\"\n     [opts & body]\n     (let [[opts body] (if (map? opts)\n                         [opts body]\n                         [nil (cons opts body)])]\n       `(let [opts# ~opts\n              thr#  (Thread. (^:once fn* [] ~@body))]\n          (.setName thr# (str (or (:name opts#) (format \"promesa/unpooled-thread/%s\" (get-next)))))\n          (.setDaemon thr# (boolean (:daemon opts# true)))\n          (.setPriority thr# (int (:priority opts# Thread/NORM_PRIORITY)))\n          (.start thr#)\n          thr#))))\n\n#?(:clj\n(defn current-thread\n  \"Return the current thread.\"\n  []\n  (Thread/currentThread)))\n\n#?(:clj\n(defn interrupted?\n  \"Check if the thread has the interrupted flag set.\n\n  There are two special cases:\n\n  Using the `:current` keyword as argument will check the interrupted\n  flag on the current thread.\n\n  Using the arity 0 (passing no arguments), then the current thread\n  will be checked and **WARNING** the interrupted flag reset to\n  `false`.\"\n  ([]\n   (Thread/interrupted))\n  ([thread]\n   (if (= :current thread)\n     (.isInterrupted (Thread/currentThread))\n     (.isInterrupted ^Thread thread)))))\n\n#?(:clj\n(defn thread-id\n  \"Retrieves the thread ID.\"\n  ([]\n   (.getId ^Thread (Thread/currentThread)))\n  ([^Thread thread]\n   (.getId thread))))\n\n#?(:clj\n(defn interrupt!\n  \"Interrupt a thread.\"\n  ([]\n   (.interrupt (Thread/currentThread)))\n  ([^Thread thread]\n   (.interrupt thread))))\n\n#?(:clj\n(defn thread?\n  \"Check if provided object is a thread instance.\"\n  [t]\n  (instance? Thread t)))\n\n#?(:clj\n(defn sleep\n  \"Turn the current thread to sleep accept a number of milliseconds or\n  Duration instance.\"\n  [ms]\n  (if (instance? Duration ms)\n    (Thread/sleep (int (.toMillis ^Duration ms)))\n    (Thread/sleep (int ms)))))\n"]}