{
"version":3,
"file":"module$node_modules$$mui$material$node$styles$responsiveFontSizes.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,iEAAA,CAAsF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG1HC,MAAAA,CAAyBH,OAAA,CAAQ,kEAAR,CAC7BI,OAAOC,CAAAA,cAAP,CAAsBH,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CI,MAAO,CAAA,CADoC,CAA7C,CAGAJ,QAAQK,CAAAA,OAAR,CAIAC,QAA4B,CAACC,UAAD,CAAaC,OAAA,CAAU,EAAvB,CAA2B,CACrD,MAAM,CACJC,WAAA,CAAc,CAAC,IAAD,CAAO,IAAP,CAAa,IAAb,CADV,CAEJC,YAAA,CAAe,CAAA,CAFX,CAGJC,MAAA,CAAS,CAHL,CAIJC,QAAA,CAAW,2EAAA,CAAA,KAAA,CAAA,GAAA,CAJP,CAAA,CAKFJ,OALJ,CAMMK,MAAQ,GAAIC,SAAUT,CAAAA,OAAd,EAAuB,EAAvB;AAA2BE,UAA3B,CACdM,MAAME,CAAAA,UAAN,CAAmB,GAAID,SAAUT,CAAAA,OAAd,EAAuB,EAAvB,CAA2BQ,KAAME,CAAAA,UAAjC,CACnB,OAAMA,WAAaF,KAAME,CAAAA,UAAzB,CAIMC,QAAU,GAAIC,SAAUC,CAAAA,aAAd,EAA6BH,UAAWI,CAAAA,YAAxC,CAJhB,CAKMC,iBAAmBX,WAAYY,CAAAA,GAAZ,CAAgBC,CAAA,EAAKT,KAAMJ,CAAAA,WAAYc,CAAAA,MAAlB,CAAyBD,CAAzB,CAArB,CACzBV,SAASY,CAAAA,OAAT,CAAiBC,OAAA,EAAW,CAC1B,MAAMC,MAAQX,UAAA,CAAWU,OAAX,CAAd,CACME,YAAcC,UAAA,CAAWZ,OAAA,CAAQU,KAAMG,CAAAA,QAAd,CAAwB,KAAxB,CAAX,CACpB,IAAI,EAAe,CAAf,EAAAF,WAAA,CAAJ,CAAA,CAIA,IAAMG,YAAc,CAAdA,EADcH,WACdG,CAAiC,CAAjCA,EAAsCnB,MAA5C,CACI,CACFoB,UADE,CAAA,CAEAL,KACJ,IAAI,CAAC,GAAIT,SAAUe,CAAAA,UAAd,EAA0BD,UAA1B,CAAL,EAA8C,CAACrB,YAA/C,CACE,KAAUuB,MAAJ,CAAmD,oGAAnD,CAAN;AAGG,GAAIhB,SAAUe,CAAAA,UAAd,EAA0BD,UAA1B,CAAL,GAEEA,UAFF,CAEeH,UAAA,CAAWZ,OAAA,CAAQe,UAAR,CAAoB,KAApB,CAAX,CAFf,CAEwDH,UAAA,CAAWD,WAAX,CAFxD,CAIA,KAAIO,UAAY,IACXxB,aAAL,GACEwB,SADF,CACc9B,KAAA8B,EAAS,GAAIjB,SAAUkB,CAAAA,aAAd,EAA6B,CAChDC,KAAMhC,KAD0C,CAEhDiC,KAAM,GAAIpB,SAAUqB,CAAAA,QAAd,EAAwB,CAC5BC,OAAQ,CADoB,CAE5BR,UAF4B,CAG5BZ,aAAcJ,UAAWI,CAAAA,YAHG,CAAxB,CAF0C,CAA7B,CADvB,CAUAJ,WAAA,CAAWU,OAAX,CAAA,CAAsB,GAAIX,SAAUT,CAAAA,OAAd,EAAuB,EAAvB,CAA2BqB,KAA3B,CAAkC,GAAIT,SAAUuB,CAAAA,kBAAd,EAAkC,CACxFC,YAAa,UAD2E,CAExFC,IAAKZ,WAFmF,CAGxFa,IA3BkBhB,WAwBsE,CAIxFiB,KAAM,KAJkF,CAKxFnC,YAAaW,gBAL2E,CAMxFc,SANwF,CAAlC,CAAlC,CA3BtB,CAH0B,CAA5B,CAuCA,OAAOrB,MAtD8C,CAHvD;IAAIC,UAAYb,MAAA,CAAuBH,OAAA,CAAQ,oDAAR,CAAvB,CACHA,QAAA,CAAQ,sCAAR,CACb,KAAImB,UAAYnB,OAAA,CAAQ,wDAAR,CAV8G;",
"sources":["node_modules/@mui/material/node/styles/responsiveFontSizes.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$mui$material$node$styles$responsiveFontSizes\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = responsiveFontSizes;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _utils = require(\"@mui/utils\");\nvar _cssUtils = require(\"./cssUtils\");\nfunction responsiveFontSizes(themeInput, options = {}) {\n  const {\n    breakpoints = ['sm', 'md', 'lg'],\n    disableAlign = false,\n    factor = 2,\n    variants = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline']\n  } = options;\n  const theme = (0, _extends2.default)({}, themeInput);\n  theme.typography = (0, _extends2.default)({}, theme.typography);\n  const typography = theme.typography;\n\n  // Convert between CSS lengths e.g. em->px or px->rem\n  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).\n  const convert = (0, _cssUtils.convertLength)(typography.htmlFontSize);\n  const breakpointValues = breakpoints.map(x => theme.breakpoints.values[x]);\n  variants.forEach(variant => {\n    const style = typography[variant];\n    const remFontSize = parseFloat(convert(style.fontSize, 'rem'));\n    if (remFontSize <= 1) {\n      return;\n    }\n    const maxFontSize = remFontSize;\n    const minFontSize = 1 + (maxFontSize - 1) / factor;\n    let {\n      lineHeight\n    } = style;\n    if (!(0, _cssUtils.isUnitless)(lineHeight) && !disableAlign) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported non-unitless line height with grid alignment.\nUse unitless line heights instead.` : (0, _utils.formatMuiErrorMessage)(6));\n    }\n    if (!(0, _cssUtils.isUnitless)(lineHeight)) {\n      // make it unitless\n      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);\n    }\n    let transform = null;\n    if (!disableAlign) {\n      transform = value => (0, _cssUtils.alignProperty)({\n        size: value,\n        grid: (0, _cssUtils.fontGrid)({\n          pixels: 4,\n          lineHeight,\n          htmlFontSize: typography.htmlFontSize\n        })\n      });\n    }\n    typography[variant] = (0, _extends2.default)({}, style, (0, _cssUtils.responsiveProperty)({\n      cssProperty: 'fontSize',\n      min: minFontSize,\n      max: maxFontSize,\n      unit: 'rem',\n      breakpoints: breakpointValues,\n      transform\n    }));\n  });\n  return theme;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","Object","defineProperty","value","default","responsiveFontSizes","themeInput","options","breakpoints","disableAlign","factor","variants","theme","_extends2","typography","convert","_cssUtils","convertLength","htmlFontSize","breakpointValues","map","x","values","forEach","variant","style","remFontSize","parseFloat","fontSize","minFontSize","lineHeight","isUnitless","Error","transform","alignProperty","size","grid","fontGrid","pixels","responsiveProperty","cssProperty","min","max","unit"]
}
