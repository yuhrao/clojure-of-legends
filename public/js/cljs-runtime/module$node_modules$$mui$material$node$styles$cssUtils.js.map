{
"version":3,
"file":"module$node_modules$$mui$material$node$styles$cssUtils.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/@mui/material/node/styles/cssUtils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$mui$material$node$styles$cssUtils\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.alignProperty = alignProperty;\nexports.convertLength = convertLength;\nexports.fontGrid = fontGrid;\nexports.getUnit = getUnit;\nexports.isUnitless = isUnitless;\nexports.responsiveProperty = responsiveProperty;\nexports.toUnitless = toUnitless;\nfunction isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n}\n\n// Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\nfunction getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n}\n\n// Emulate the sass function \"unitless\"\nfunction toUnitless(length) {\n  return parseFloat(length);\n}\n\n// Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\nfunction convertLength(baseFontSize) {\n  return (length, toUnit) => {\n    const fromUnit = getUnit(length);\n\n    // Optimize for cases where `from` and `to` units are accidentally the same.\n    if (fromUnit === toUnit) {\n      return length;\n    }\n\n    // Convert input length to pixels.\n    let pxLength = toUnitless(length);\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      }\n    }\n\n    // Convert length in pixels to the output unit\n    let outputLength = pxLength;\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\nfunction alignProperty({\n  size,\n  grid\n}) {\n  const sizeBelow = size - size % grid;\n  const sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n}\n\n// fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\nfunction fontGrid({\n  lineHeight,\n  pixels,\n  htmlFontSize\n}) {\n  return pixels / (lineHeight * htmlFontSize);\n}\n\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\nfunction responsiveProperty({\n  cssProperty,\n  min,\n  max,\n  unit = 'rem',\n  breakpoints = [600, 900, 1200],\n  transform = null\n}) {\n  const output = {\n    [cssProperty]: `${min}${unit}`\n  };\n  const factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(breakpoint => {\n    let value = min + factor * breakpoint;\n    if (transform !== null) {\n      value = transform(value);\n    }\n    output[`@media (min-width:${breakpoint}px)`] = {\n      [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`\n    };\n  });\n  return output;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","getUnit","input","String","match","Object","defineProperty","value","alignProperty","size","grid","sizeBelow","sizeAbove","convertLength","baseFontSize","length","toUnit","fromUnit","pxLength","parseFloat","outputLength","toFixed","fontGrid","lineHeight","pixels","htmlFontSize","isUnitless","responsiveProperty","cssProperty","min","max","unit","breakpoints","transform","output","factor","forEach","breakpoint","Math","round","toUnitless"]
}
