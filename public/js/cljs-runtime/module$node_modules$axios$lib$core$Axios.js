shadow$provide.module$node_modules$axios$lib$core$Axios=function(global,require,module,exports){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var _utils=_interopRequireDefault(require("module$node_modules$axios$lib$utils")),_buildURL=_interopRequireDefault(require("module$node_modules$axios$lib$helpers$buildURL")),_InterceptorManager=_interopRequireDefault(require("module$node_modules$axios$lib$core$InterceptorManager")),
_dispatchRequest=_interopRequireDefault(require("module$node_modules$axios$lib$core$dispatchRequest")),_mergeConfig=_interopRequireDefault(require("module$node_modules$axios$lib$core$mergeConfig")),_buildFullPath=_interopRequireDefault(require("module$node_modules$axios$lib$core$buildFullPath")),_validator=_interopRequireDefault(require("module$node_modules$axios$lib$helpers$validator")),_AxiosHeaders=_interopRequireDefault(require("module$node_modules$axios$lib$core$AxiosHeaders"));const validators=
_validator.default.validators;class Axios{constructor(instanceConfig){this.defaults=instanceConfig;this.interceptors={request:new _InterceptorManager.default,response:new _InterceptorManager.default}}request(configOrUrl,config){"string"===typeof configOrUrl?(config=config||{},config.url=configOrUrl):config=configOrUrl||{};config=(0,_mergeConfig.default)(this.defaults,config);const {transitional,paramsSerializer,headers}=config;void 0!==transitional&&_validator.default.assertOptions(transitional,{silentJSONParsing:validators.transitional(validators.boolean),
forcedJSONParsing:validators.transitional(validators.boolean),clarifyTimeoutError:validators.transitional(validators.boolean)},!1);void 0!==paramsSerializer&&_validator.default.assertOptions(paramsSerializer,{encode:validators.function,serialize:validators.function},!0);config.method=(config.method||this.defaults.method||"get").toLowerCase();(configOrUrl=headers&&_utils.default.merge(headers.common,headers[config.method]))&&_utils.default.forEach("delete get head post put patch common".split(" "),
method=>{delete headers[method]});config.headers=_AxiosHeaders.default.concat(configOrUrl,headers);const requestInterceptorChain=[];let synchronousRequestInterceptors=!0;this.interceptors.request.forEach(function(interceptor){if("function"!==typeof interceptor.runWhen||!1!==interceptor.runWhen(config))synchronousRequestInterceptors=synchronousRequestInterceptors&&interceptor.synchronous,requestInterceptorChain.unshift(interceptor.fulfilled,interceptor.rejected)});const responseInterceptorChain=[];
this.interceptors.response.forEach(function(interceptor){responseInterceptorChain.push(interceptor.fulfilled,interceptor.rejected)});let promise;configOrUrl=0;let len;if(!synchronousRequestInterceptors){var chain=[_dispatchRequest.default.bind(this),void 0];chain.unshift.apply(chain,requestInterceptorChain);chain.push.apply(chain,responseInterceptorChain);len=chain.length;for(promise=Promise.resolve(config);configOrUrl<len;)promise=promise.then(chain[configOrUrl++],chain[configOrUrl++]);return promise}len=
requestInterceptorChain.length;chain=config;for(configOrUrl=0;configOrUrl<len;){const onFulfilled=requestInterceptorChain[configOrUrl++],onRejected=requestInterceptorChain[configOrUrl++];try{chain=onFulfilled(chain)}catch(error){onRejected.call(this,error);break}}try{promise=_dispatchRequest.default.call(this,chain)}catch(error){return Promise.reject(error)}configOrUrl=0;for(len=responseInterceptorChain.length;configOrUrl<len;)promise=promise.then(responseInterceptorChain[configOrUrl++],responseInterceptorChain[configOrUrl++]);
return promise}getUri(config){config=(0,_mergeConfig.default)(this.defaults,config);const fullPath=(0,_buildFullPath.default)(config.baseURL,config.url);return(0,_buildURL.default)(fullPath,config.params,config.paramsSerializer)}}_utils.default.forEach(["delete","get","head","options"],function(method){Axios.prototype[method]=function(url,config){return this.request((0,_mergeConfig.default)(config||{},{method,url,data:(config||{}).data}))}});_utils.default.forEach(["post","put","patch"],function(method){function generateHTTPMethod(isForm){return function(url,
data,config){return this.request((0,_mergeConfig.default)(config||{},{method,headers:isForm?{"Content-Type":"multipart/form-data"}:{},url,data}))}}Axios.prototype[method]=generateHTTPMethod();Axios.prototype[method+"Form"]=generateHTTPMethod(!0)});exports.default=Axios}
//# sourceMappingURL=module$node_modules$axios$lib$core$Axios.js.map
