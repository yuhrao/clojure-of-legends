shadow$provide.module$node_modules$axios$lib$core$mergeConfig=function(global,require,module,exports){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}Object.defineProperty(exports,"__esModule",{value:!0});exports.default=function(config1,config2){function getMergedValue(target,source,caseless){return _utils.default.isPlainObject(target)&&_utils.default.isPlainObject(source)?_utils.default.merge.call({caseless},target,source):_utils.default.isPlainObject(source)?_utils.default.merge({},
source):_utils.default.isArray(source)?source.slice():source}function mergeDeepProperties(a,b,caseless){if(!_utils.default.isUndefined(b))return getMergedValue(a,b,caseless);if(!_utils.default.isUndefined(a))return getMergedValue(void 0,a,caseless)}function valueFromConfig2(a,b){if(!_utils.default.isUndefined(b))return getMergedValue(void 0,b)}function defaultToConfig2(a,b){if(!_utils.default.isUndefined(b))return getMergedValue(void 0,b);if(!_utils.default.isUndefined(a))return getMergedValue(void 0,
a)}function mergeDirectKeys(a,b,prop){if(prop in config2)return getMergedValue(a,b);if(prop in config1)return getMergedValue(void 0,a)}config2=config2||{};const config={},mergeMap={url:valueFromConfig2,method:valueFromConfig2,data:valueFromConfig2,baseURL:defaultToConfig2,transformRequest:defaultToConfig2,transformResponse:defaultToConfig2,paramsSerializer:defaultToConfig2,timeout:defaultToConfig2,timeoutMessage:defaultToConfig2,withCredentials:defaultToConfig2,adapter:defaultToConfig2,responseType:defaultToConfig2,
xsrfCookieName:defaultToConfig2,xsrfHeaderName:defaultToConfig2,onUploadProgress:defaultToConfig2,onDownloadProgress:defaultToConfig2,decompress:defaultToConfig2,maxContentLength:defaultToConfig2,maxBodyLength:defaultToConfig2,beforeRedirect:defaultToConfig2,transport:defaultToConfig2,httpAgent:defaultToConfig2,httpsAgent:defaultToConfig2,cancelToken:defaultToConfig2,socketPath:defaultToConfig2,responseEncoding:defaultToConfig2,validateStatus:mergeDirectKeys,headers:(a,b)=>mergeDeepProperties(headersToObject(a),
headersToObject(b),!0)};_utils.default.forEach(Object.keys(config1).concat(Object.keys(config2)),function(prop){const merge=mergeMap[prop]||mergeDeepProperties,configValue=merge(config1[prop],config2[prop],prop);_utils.default.isUndefined(configValue)&&merge!==mergeDirectKeys||(config[prop]=configValue)});return config};var _utils=_interopRequireDefault(require("module$node_modules$axios$lib$utils")),_AxiosHeaders=_interopRequireDefault(require("module$node_modules$axios$lib$core$AxiosHeaders"));
const headersToObject=thing=>thing instanceof _AxiosHeaders.default?thing.toJSON():thing}
//# sourceMappingURL=module$node_modules$axios$lib$core$mergeConfig.js.map
